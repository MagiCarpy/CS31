Project 6


1. The subparts to this problem involve errors in the use of pointers.
    
    a. The bugs were in accessing the value at the pointer (fixed to *(ptr+1)) and decrementing the pointer prematurely in the loop. Also changed the order of assignment {10, 20, 30}.

    int main() {
        int arr[3] = { 5, 10, 15 };
        int* ptr = arr;

        *ptr = 10;          // set arr[0] to 10
        *(ptr + 1) = 20;    // set arr[1] to 20
        ptr += 2;
        *ptr = 30;          // set arr[2] to 30


        while (ptr >= arr)
        {
            cout << *ptr << endl; // print values
            ptr--;
        }
    }


    b. The bugged findMax function passes the "pToMax" pointer by value which does not ultimately modify the variable passed into the function. Solve by adding & to the pointer type to pass by reference. 

    void findMax(int arr[], int n, int*& pToMax)
        {
            if (n <= 0) 
                return;      // no items, no maximum!
        
            pToMax = arr;

            for (int i = 1; i < n; i++)
            {
                if (arr[i] > *pToMax)
                     pToMax = arr + i;
            }
        }       

        int main()
        {
            int nums[4] = { 5, 3, 15, 6 };
            int* ptr = &nums[0];

            findMax(nums, 4, ptr);
            cout << "The maximum is at address " << ptr << endl;
            cout << "It's at position " << ptr - nums << endl;
            cout << "Its value is " << *ptr << endl;
        }


    c. The bugged main function originally had an uninitialized pointer "ptr" with no definite initialized memory address (undefined behavior). Solve by declaring an int type, pass the memory address of that int type to computeCube, and then print out the int value at that memory address.

        void computeCube(int n, int* ncubed)
        {
            *ncubed = n * n * n;
        }

        int main()
        {
            int ptr;
            computeCube(5, &ptr);
            cout << "Five cubed is " << ptr << endl;
        }


    d. The bugged strequal function checks the memory address for a null byte instead of the char value at that address, the conditional in the loop compares two memory addresses instead of the char value at the address, and the ending should check if both char values are equal to eachother instead of the memory address.

    // return true if two C strings are equal
    bool strequal(const char str1[], const char str2[])
    {
        while (*str1 != 0 && *str2 != 0)  // zero bytes at ends
        {
            if (*str1 != *str2)  // compare corresponding characters
                return false;
            str1++;            // advance to the next character
            str2++;
        }
        return *str1 == *str2;   // both ended at same time?
    }

    int main()
    {
        char a[15] = "Alex H.";
        char b[15] = "Alex T.";

        if (strequal(a,b))
            cout << "They're the same person!\n";
    }


    e. The program's incorrect action is that in the main function, the pointer "ptr" is initialized to a memory address with an indefinite value (undefined behavior) because in getPtrToArray, anArray only exists within the scope of the function and is discarded after being called.


2. 

    a. double* cat;

    b. double mouse[5];
    
    c. cat = &mouse[4];

    d. *cat = 25;

    e. *(mouse+3) = 42;

    f. cat -= 3;

    g. cat[1] = 17;
    
    h. cat[0] = 54;

    i. bool d = (cat == mouse);

    j. bool b = (*cat == *(cat+1));


3. 
    a.

    double mean(const double* scores, int numScores)
    {
        const double* ptr = scores;
        double tot = 0;
        int i = 0;
        while (i < numScores)
        {
            tot += *(ptr+i);
            i++;
        }
        return tot/numScores;
    }


    b. 

    const char* findTheChar(const char* str, char chr)
    {
        for (int k = 0; *(str+k) != 0; k++)
            if (*(str+k) == chr)
                return (str+k);

        return nullptr;
    }

    c.

    const char* findTheChar(const char* str, char chr)
    {
        for (; *str != 0; str++)
            if (*str == chr)
                return str;

        return nullptr;
    }


4. Explanation in the comment below each command

    int main()
    {
        int array[6] = { 5, 3, 4, 17, 22, 19 };

        int* ptr = maxwell(array, &array[2]);
        // ptr set to memory address at beginning of array because 5 > 4 
        *ptr = -1;
        // sets ptr's value to -1 
        ptr += 2;
        // increments ptr by 2 int memory address  
        ptr[1] = 9;
        // sets the value at 1 int memory address past ptr to 9
        *(array+1) = 79;
        // sets array[1] to 79
        // now array = { -1, 79, 4, 9, 22, 19 };

        cout << &array[5] - ptr << endl;
        // prints 3 or the difference in memory address (from array[5] to array[2]), pointer arithmetic accounts for bytes int uses in memory

        swap1(&array[0], &array[1]);
        // pointers passed by value and values of array are not modified, so function doesn't affect the main routine
        swap2(array, &array[2]);
        // value at array swapped with value at &array[2] (index 0 and 2)

        for (int i = 0; i < 6; i++)
            cout << array[i] << endl;
        // prints array { 4, 79, -1, 9, 22, 19 }
    }
    /* Final Output:
        3   // printing (&array[5] - ptr)
        4   // printing array values
        79
        -1
        9
        22
        19
    */


5. 

    void removeS(char* ptr) 
    {
        char* newPtr = ptr;
        while (*ptr != '\0') {
            if (*ptr != 's' && *ptr != 'S') {
                *newPtr = *ptr;
                newPtr++;
            }
            ptr++;
        } 
        *newPtr = '\0';  
    }


